h1 = @title
h3.subtitle Part 1 of Creating a Developer Blog series
h5 Posted Dec 20, 2014
h5 Updated Dec 21, 2014
br/
.col-lg-8.col-lg-offset-2
  .dynamic-center
    h3 Overview
    h4 Assumptions
    p You know what the terms in the subtitle mean. You have a Mac or can translate the Terminal commands to Command Prompt. You have Sublime Text installed or can translate accordingly. You've set up your environment for Git, GitHub, and Heroku. You have minor experience with Ruby or a decent amount of experience with another OOP language.
    h4 Quick Summary
    p
      | Blogs take a lot of time to write. They shouldn't take a long time to setup. Combining Sinatra, Bootstrap and Heroku makes setup easy. Add Prism.js on top of that and you can get a technical blog up in a matter of minutes. This is the first article in a multi-part series. For more, check the
      a href="/blog"  blog
      | .
    h4 Tech Used
    a href="http://www.sinatrarb.com/"  Sinatra
    |  v1.4.5
    br/
    a href="https://www.heroku.com/"  Heroku
    br/
    br/
    h3 Hello World
    p
      | First step is to get a
      a href="http://en.wikipedia.org/wiki/%22Hello,_world!%22_program"  Hello World
      |  on our local machine then get it to work on Heroku. Sinatra is a lightweight HTTP server, whereas Rails is the kitchen sink. What makes Sinatra so awesome is its ability to get a Hello World up in four lines of code. But first, let's create a new folder in the Terminal, install Sinatra, and create our app.rb.
    pre
      code.language-bash $ cd ~
        $ mkdir sinatra_projects
        $ cd sinatra_projects
        $ mkdir blog
        $ cd blog
        $ gem install sinatra
        $ touch app.rb
        $ subl .
    p Now that we have Sublime open, we can start coding. Let's write those four lines I promised earlier.
    pre
      code.language-ruby # blog/app.rb
        require 'sinatra'
        get '/' do
          'Hello world!'
        end
    p Now let's jump back to Terminal to get it up and running.
    pre
      code.language-bash $ ruby app.rb
        [2014-12-20 15:56:58] INFO  WEBrick 1.3.1
        [2014-12-20 15:56:58] INFO  ruby 2.1.2 (2014-05-08) [x86_64-darwin13.0]
        == Sinatra/1.4.5 has taken the stage on 4567 for development with backup from WEBrick
        [2014-12-20 15:56:58] INFO  WEBrick::HTTPServer#start: pid=16304 port=4567
    p
      | To make sure it's working, open up Chrome (or your browser of choice) and head to
      a href="http://localhost:4567/"  http://localhost:4567/
      | . If that didn't work, match the numbers after
      code localhost:
      |  with the numbers next to
      code
        | port=
      |  in Terminal.
    p
      | Just like that, we have Hello World in Sinatra. Pretty simple, right? Now let's do a couple things to get Heroku to work. First I'm going to connect it to GitHub. To set that up: github.com > your profile > Repositories > New > Go through their step-by-step process, ignore 
      code $ touch README.rdoc
      |  and replace 
      code $ git add README.rdoc
      |  with 
      code $ git add .
    p Now that Git and GitHub are set up, let's get our app on Heroku to know everything's working. You'll have to make a few files, which are denoted by the comments.
    pre
      code.language-ruby # blog/config.ru
        require './app'
        run Sinatra::Application

        # blog/Gemfile
        source 'https://rubygems.org'
        gem 'sinatra'
    p Now jump over to the Terminal to install the gems and set up Heroku. Note: You can rename it to whatever you'd like.
    pre
      code.language-bash $ bundle
        $ git add . --all
        $ git commit -m "Set up Heroku"
        $ git push
        $ heroku create
        $ heroku apps:rename gerrypass
        $ git push heroku master
        $ heroku open
    p Voila! We have Hello World up.
    br/
    h3 Final Word
    p
      | This project can be found on
      a href="https://github.com/rgpass/sinatra_blog_tutorial/commit/ae4c721c66d1d87904c4774f2fcb0145f4c1a8a2"  GitHub
      | . Check the
      a href="/blog"  blog
      |  for more in this multi-part series.
